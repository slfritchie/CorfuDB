-module(layout_eqc).

%% To compile and run with Quviq's QuickCheck:
%%
%% $ erl -sname foo -pz ~/lib/eqc/ebin
%%
%% > c(layout_eqc, [{d, 'EQC'}]).
%% > eqc:quickcheck(layout_eqc:prop()).
%%
%% To compile and run with Proper:
%%
%% $ erl -sname foo -pz /Users/fritchie/src/erlang/proper/ebin
%%
%% > c(layout_eqc, [{d, 'PROPER'}]).
%% > proper:quickcheck(layout_eqc:prop()).

%% To run the corfu_server:
%% ./bin/corfu_server -Q -l /tmp/corfu-test-dir -s 8000 --cm-poll-interval=9999
%%
%% The --cm-poll-interval flag is optional: it can avoid spammy noise
%% when also using "-d TRACE" that is caused by config manager polling.

-ifdef(PROPER).
-include_lib("proper/include/proper.hrl").
-endif.

-ifdef(EQC).
-include_lib("eqc/include/eqc.hrl").
-include_lib("eqc/include/eqc_statem.hrl").
-endif.

-compile(export_all).

-record(state, {
          reset_p = false :: boolean(),
          endpoint :: string(),
          reg_names :: list(),
          prepared_rank=-1 :: non_neg_integer(),
          proposed_layout="" :: string(),
          committed_layout="",
          committed_epoch=0    % Must match server's epoch after reset()!
         }).

-record(layout, {
          epoch=-1,
          ls=[],
          ss=[],
          segs=[]
         }).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

gen_mbox(#state{endpoint=Endpoint, reg_names=RegNames}) ->
    noshrink( ?LET(RegName, oneof(RegNames),
                   {RegName, endpoint2nodename(Endpoint)} )).

gen_rank() ->
    choose(1, 100).

gen_rank(#state{prepared_rank=0}) ->
    gen_rank();
gen_rank(#state{prepared_rank=PR}) ->
    frequency([{10, PR},
               { 2, gen_rank()}]).

gen_c_epoch(#state{committed_epoch=CommittedEpoch}) ->
    CommittedEpoch.

gen_epoch() ->
    choose(1, 100).

gen_layout() ->
    ?LET(Epoch, oneof([5, 22, gen_epoch()]),
         gen_layout(Epoch)).

gen_layout(Epoch) ->
    #layout{epoch=Epoch}.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

initial_state() ->
    initial_state(local_mboxes(), local_endpoint()).

initial_state(Mboxes, Endpoint) ->
    #state{endpoint=Endpoint, reg_names=Mboxes}.

precondition(S, {call,_,reset,_}) ->
    not S#state.reset_p;
precondition(S, {call,_,prepare,[_,_,_,Rank]}) ->
    S#state.reset_p andalso Rank > 0;
precondition(S, {call,_,propose,[_,_,_,Rank,Layout]}) ->
    S#state.reset_p andalso Rank > 0 andalso Layout /= "";
precondition(S, {call,_,commit,[_,_,_,Rank,Layout]}) ->
    S#state.reset_p andalso Rank > 0 andalso Layout /= "";
precondition(S, _Call) ->
    S#state.reset_p.

command(S=#state{endpoint=Endpoint, reset_p=false}) ->
    {call, ?MODULE, reset, [gen_mbox(S), Endpoint]};
command(S=#state{endpoint=Endpoint, reset_p=true,
                 proposed_layout=ProposedLayout}) ->
    frequency(
      [
       {5,  {call, ?MODULE, reboot,
             [gen_mbox(S), Endpoint]}},
       {20, {call, ?MODULE, query,
             [gen_mbox(S), Endpoint, gen_c_epoch(S)]}},
       {20, {call, ?MODULE, prepare,
             [gen_mbox(S), Endpoint, gen_c_epoch(S), gen_rank()]}},
       {20, {call, ?MODULE, propose,
             [gen_mbox(S), Endpoint, gen_c_epoch(S), gen_rank(S), gen_layout()]}},
       {20, {call, ?MODULE, commit,
             [gen_mbox(S), Endpoint, gen_c_epoch(S), gen_rank(S), ProposedLayout]}}
      ]).

postcondition(S, Call, Ret) ->
    try
        postcondition2(S, Call, Ret)
    catch X:Y ->
            io:format(user,
                      "Bad: ~p ~p @ ~p\n", [X, Y, erlang:get_stacktrace()])
    end.

postcondition2(_S, {call,_,RRR,[_Mbox, _EP]}, Ret)
  when RRR == reboot; RRR == reset ->
    case Ret of
        ["OK"] -> true;
        Else   -> {got, Else}
    end;
postcondition2(#state{committed_layout=CommittedLayout},
               {call,_,query,[_Mbox, _EP, C_Epoch]}, Ret) ->
    case Ret of
        timeout ->
            false;
        ["OK", _JSON] when CommittedLayout == "" ->
            %% We haven't committed anything.  Whatever default layout
            %% that the server has (e.g. after reset()) is ok.
            true;
        ["OK", JSON] ->
            %% JSON == layout_to_json(CommittedLayout);
            JSON == layout_to_json(CommittedLayout#layout{ss=["foo"]});
        {error, wrongEpochException, CorrectEpoch} ->
            CorrectEpoch /= C_Epoch;
        Else ->
            io:format(user, "Q ~p\n", [Else]),
            false
    end;
postcondition2(#state{prepared_rank=PreparedRank,
                      committed_epoch=CommittedEpoch},
              {call,_,prepare,[_Mbox, _EP, C_Epoch, Rank]}, RetStr) ->
    case termify(RetStr) of
        ok ->
            C_Epoch == CommittedEpoch andalso Rank > PreparedRank;
        {error, outrankedException, _ExceptionRank} ->
            Rank =< PreparedRank;
        {error, wrongEpochException, CorrectEpoch} ->
            CorrectEpoch /= C_Epoch
            andalso
            CorrectEpoch == CommittedEpoch;
        Else ->
            {prepare, Rank, prepared_rank, PreparedRank, Else}
    end;
postcondition2(#state{prepared_rank=PreparedRank,
                      proposed_layout=ProposedLayout,
                      committed_epoch=CommittedEpoch},
              {call,_,propose,[_Mbox, _EP, C_Epoch, Rank, _Layout]}, RetStr) ->
    case termify(RetStr) of
        ok ->
            Rank == PreparedRank;
        {error, outrankedException, ExceptionRank} ->
            %% -1 = no prepare
            (ExceptionRank == -1 andalso PreparedRank == -1)
            orelse
            Rank /= PreparedRank
            orelse
            %% Already proposed?  2x isn't permitted.
            ProposedLayout /= "";
        {error, wrongEpochException, CorrectEpoch} ->
            CorrectEpoch /= C_Epoch
            andalso
            CorrectEpoch == CommittedEpoch;
        Else ->
            {propose, Rank, prepared_rank, PreparedRank, Else}
    end;
postcondition2(#state{committed_epoch=CommittedEpoch},
               {call,_,commit,[_Mbox, _EP, C_Epoch, Rank, Layout]}, RetStr) ->
    case termify(RetStr) of
        ok ->
            %% According to the model, prepare & propose are optional.
            %% We could be in a quorum minority, didn't participate in
            %% prepare & propose, the decision was made without us, and
            %% committed is telling us the result.
            %% 
            %% After chatting with Dahlia, the model should separate
            %% rank checking from epoch checking.  In theory, the
            %% implementation could reset rank state after a new
            %% layout with bigger epoch has been committed.  We assume
            %% here that the implementation *does* reset rank upon
            %% commit -- that may change, pending more changes in PR
            %% #210 and perhaps elsewhere.
            %%
            %% Thus, no rank checking here, just epoch going forward.
            Layout#layout.epoch > CommittedEpoch;
        {error, nack} ->
            %% TODO: verify that the epoch went backward.
            Layout#layout.epoch =< CommittedEpoch;
        {error, wrongEpochException, CorrectEpoch} ->
            CorrectEpoch /= C_Epoch
            andalso
            CorrectEpoch == CommittedEpoch;
        Else ->
            {commit, rank, Rank, layout, Layout,
             committed, CommittedEpoch, Else}
    end.

next_state(S, _V, {call,_,reset,[_Mbox, _EP]}) ->
    S#state{reset_p=true};
next_state(S=#state{prepared_rank=PreparedRank,
                    committed_epoch=CommittedEpoch}, _V,
           {call,_,prepare,[_Mbox, _EP, C_Epoch, Rank]}) ->
    if C_Epoch == CommittedEpoch andalso Rank > PreparedRank ->
            S#state{prepared_rank=Rank, proposed_layout=""};
       true ->
            S
    end;
next_state(S=#state{prepared_rank=PreparedRank,
                    committed_epoch=CommittedEpoch}, _V,
           {call,_,propose,[_Mbox, _EP, C_Epoch, Rank, Layout]}) ->
    if C_Epoch == CommittedEpoch andalso Rank == PreparedRank ->
            S#state{proposed_layout=Layout};
       true ->
            S
    end;
next_state(S=#state{committed_epoch=CommittedEpoch}, _V,
           {call,_,commit,[_Mbox, _EP, C_Epoch, _Rank, Layout]}) ->
    if C_Epoch == CommittedEpoch andalso Layout#layout.epoch > CommittedEpoch ->
            S#state{prepared_rank=-1,
                    proposed_layout="",
                    committed_layout=Layout,
                    committed_epoch=Layout#layout.epoch};
       true ->
            S
    end;
next_state(S, _V, _NoSideEffectCall) ->
    S.

%%%%

reset(Mbox, Endpoint) ->
    io:format(user, "R", []),
    java_rpc(Mbox, reset, Endpoint).

reboot(Mbox, Endpoint) ->
    %% io:format(user, "r", []),
    java_rpc(Mbox, reboot, Endpoint).

query(Mbox, Endpoint, C_Epoch) ->
    java_rpc(Mbox, "query", Endpoint, C_Epoch, []).

prepare(Mbox, Endpoint, C_Epoch, Rank) ->
    java_rpc(Mbox, "prepare", Endpoint, C_Epoch,
             ["-r", integer_to_list(Rank)]).

propose(Mbox, Endpoint, C_Epoch, Rank, Layout) ->
    JSON = layout_to_json(Layout),
    TmpPath = lists:flatten(io_lib:format("/tmp/layout.~w", [now()])),
    ok = file:write_file(TmpPath, JSON),
    Res = java_rpc(Mbox, "propose", Endpoint, C_Epoch,
                   ["-r", integer_to_list(Rank), "-l", TmpPath]),
    file:delete(TmpPath),
    Res.

commit(Mbox, Endpoint, C_Epoch, Rank, Layout) ->
    JSON = layout_to_json(Layout),
    TmpPath = lists:flatten(io_lib:format("/tmp/layout.~w", [now()])),
    ok = file:write_file(TmpPath, JSON),
    Res = java_rpc(Mbox, "committed", Endpoint, C_Epoch,
                   ["-r", integer_to_list(Rank), "-l", TmpPath]),
    file:delete(TmpPath),
    Res.

termify(["OK"]) ->
    ok;
termify(["ERROR", "NACK"]) ->
    {error, nack};
termify(["ERROR", "Exception " ++ _E1, E2|Rest] = _L) ->
    case string:str(E2, "OutrankedException:") of
        I when I > 0 ->
            NewRank = parse_newrank(Rest),
            {error, outrankedException, NewRank};
        _ ->
            case string:str(E2, "WrongEpochException") of
                I2 when I2 > 0 ->
                    CorrectEpoch = parse_correctepoch(Rest),
                    {error, wrongEpochException, CorrectEpoch}
            end
    end;
termify(timeout) ->
    timeout.

parse_newrank(["newRank: " ++ NR|_]) ->
    list_to_integer(NR);
parse_newrank([_|T]) ->
    parse_newrank(T).

parse_correctepoch(["correctEpoch: " ++ NR|_]) ->
    list_to_integer(NR);
parse_correctepoch([_|T]) ->
    parse_correctepoch(T).

layout_to_json(#layout{ls=Ls, ss=Seqs, segs=Segs, epoch=Epoch}) ->
    "{\n  \"layoutServers\": " ++
        string_ify_list(Ls) ++
        ",\n  \"sequencers\": " ++
        string_ify_list(Seqs) ++
        ",\n  \"segments\": " ++
        string_ify_list(Segs) ++
        ",\n  \"epoch\": " ++
        integer_to_list(Epoch) ++
        "\n}".

string_ify_list(L) ->
    "[" ++ string:join([[$\"] ++ X ++ [$\"] || X <- L], ",") ++ "]".

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

local_mboxes() ->
    [cmdlet0, cmdlet1, cmdlet2, cmdlet3, cmdlet4,
     cmdlet5, cmdlet6, cmdlet7, cmdlet8, cmdlet9].

local_endpoint() ->
    "sbb5:8000".

endpoint2nodename(Endpoint) ->
    [HostName, Port] = string:tokens(Endpoint, ":"),
    list_to_atom("corfu-" ++ Port ++ "@" ++ HostName).

-ifdef(EQC).
my_run_always(AlwaysNum, Mod, Cmds, RunFun, CheckFun) ->
    ?ALWAYS(AlwaysNum,
            begin
                {H, S_or_Hs, Res} = RunFun(Mod, Cmds),
                aggregate(command_names(Cmds),
                measure(
                  cmds_length,
                  try length(Cmds) catch _:_ -> 0 end,
                pretty_commands(
                  ?MODULE, Cmds, {H,S_or_Hs,Res},
                %% ?WHENFAIL(
                %%   io:format("H: ~p~nS: ~p~nR: ~p~n", [H,S_or_Hs,Res]),
                  CheckFun(Cmds, H, S_or_Hs, Res)
                )))
            end).
-endif.
-ifdef(PROPER).
my_run_always(AlwaysNum, Mod, Cmds, RunFun, CheckFun) ->
    begin
        BigResList = [RunFun(Mod, Cmds) || _ <- lists:seq(1, AlwaysNum)],
        aggregate(command_names(Cmds),
        measure(
          cmds_length,
          try length(Cmds) catch _:_ -> 0 end,
          begin
              Chk_HSHsRes =
                  lists:zip([CheckFun(Cmds, H, S_or_Hs, Res) ||
                                {H, S_or_Hs, Res} <- BigResList],
                            BigResList),
              HSHsRes_failed = [X || X={Chk, _HSHsRes} <- Chk_HSHsRes,
                                     Chk /= true],
              case HSHsRes_failed of
                  [] ->
                      true;
                  [{Chk, {H, S_or_Hs, Res}}|_] ->
                  ?WHENFAIL(
                     io:format("H: ~p~nS: ~p~nR: ~p~n", [H,S_or_Hs,Res]),
                     Chk
                    )
              end
          end
         ))
    end.

-endif.

prop() ->
    prop(1).

prop(MoreCmds) ->
    prop(MoreCmds, local_mboxes(), local_endpoint()).

prop(MoreCmds, Mboxes, Endpoint) ->
    random:seed(now()),
    %% Hmmmm, more_commands() doesn't appear to work correctly with Proper.
    ?FORALL(Cmds, more_commands(MoreCmds,
                                commands(?MODULE,
                                         initial_state(Mboxes, Endpoint))),
            my_run_always(1, ?MODULE, Cmds,
                          fun(Mod, TheCmds) ->
                                  run_commands(Mod, TheCmds)
                          end,
                          fun(_TheCmds, _H, _S_or_Hs, Res) ->
                                  Res == ok
                          end)
            ).

prop_parallel() ->
    prop_parallel(1).

prop_parallel(MoreCmds) ->
    prop_parallel(MoreCmds, local_mboxes(), local_endpoint()).

% % EQC has an exponential worst case for checking {SIGH}
-define(PAR_CMDS_LIMIT, 6). % worst case so far @ 7 = 52 seconds!

prop_parallel(MoreCmds, Mboxes, Endpoint) ->
    random:seed(now()),
    {FileMod, FileCmds, FileRes} = {layout_eqc,{[{init,{state,false,[115,98,98,53,58,56,48,48,48],[cmdlet0,cmdlet1,cmdlet2,cmdlet3,cmdlet4,cmdlet5,cmdlet6,cmdlet7,cmdlet8,cmdlet9],-1,[],[],0}},{set,{var,1},{call,layout_eqc,reset,[{cmdlet8,'corfu-8000@sbb5'},[115,98,98,53,58,56,48,48,48]]}},{set,{var,2},{call,layout_eqc,propose,[{cmdlet1,'corfu-8000@sbb5'},[115,98,98,53,58,56,48,48,48],0,86,{layout,5,[],[],[]}]}},{set,{var,3},{call,layout_eqc,query,[{cmdlet0,'corfu-8000@sbb5'},[115,98,98,53,58,56,48,48,48],0]}},{set,{var,4},{call,layout_eqc,prepare,[{cmdlet8,'corfu-8000@sbb5'},[115,98,98,53,58,56,48,48,48],0,14]}},{set,{var,5},{call,layout_eqc,propose,[{cmdlet8,'corfu-8000@sbb5'},[115,98,98,53,58,56,48,48,48],0,14,{layout,92,[],[],[]}]}},{set,{var,6},{call,layout_eqc,prepare,[{cmdlet8,'corfu-8000@sbb5'},[115,98,98,53,58,56,48,48,48],0,52]}},{set,{var,7},{call,layout_eqc,propose,[{cmdlet4,'corfu-8000@sbb5'},[115,98,98,53,58,56,48,48,48],0,52,{layout,5,[],[],[]}]}},{set,{var,8},{call,layout_eqc,query,[{cmdlet1,'corfu-8000@sbb5'},[115,98,98,53,58,56,48,48,48],0]}},{set,{var,9},{call,layout_eqc,commit,[{cmdlet0,'corfu-8000@sbb5'},[115,98,98,53,58,56,48,48,48],0,52,{layout,5,[],[],[]}]}},{set,{var,10},{call,layout_eqc,propose,[{cmdlet5,'corfu-8000@sbb5'},[115,98,98,53,58,56,48,48,48],5,81,{layout,5,[],[],[]}]}},{set,{var,11},{call,layout_eqc,prepare,[{cmdlet3,'corfu-8000@sbb5'},[115,98,98,53,58,56,48,48,48],5,21]}},{set,{var,12},{call,layout_eqc,query,[{cmdlet1,'corfu-8000@sbb5'},[115,98,98,53,58,56,48,48,48],5]}},{set,{var,13},{call,layout_eqc,propose,[{cmdlet6,'corfu-8000@sbb5'},[115,98,98,53,58,56,48,48,48],5,54,{layout,5,[],[],[]}]}},{set,{var,14},{call,layout_eqc,query,[{cmdlet7,'corfu-8000@sbb5'},[115,98,98,53,58,56,48,48,48],5]}},{set,{var,15},{call,layout_eqc,reboot,[{cmdlet4,'corfu-8000@sbb5'},[115,98,98,53,58,56,48,48,48]]}},{set,{var,16},{call,layout_eqc,prepare,[{cmdlet8,'corfu-8000@sbb5'},[115,98,98,53,58,56,48,48,48],5,53]}},{set,{var,17},{call,layout_eqc,propose,[{cmdlet6,'corfu-8000@sbb5'},[115,98,98,53,58,56,48,48,48],5,53,{layout,22,[],[],[]}]}},{set,{var,18},{call,layout_eqc,propose,[{cmdlet2,'corfu-8000@sbb5'},[115,98,98,53,58,56,48,48,48],5,10,{layout,5,[],[],[]}]}},{set,{var,19},{call,layout_eqc,query,[{cmdlet1,'corfu-8000@sbb5'},[115,98,98,53,58,56,48,48,48],5]}},{set,{var,20},{call,layout_eqc,prepare,[{cmdlet8,'corfu-8000@sbb5'},[115,98,98,53,58,56,48,48,48],5,35]}},{set,{var,21},{call,layout_eqc,query,[{cmdlet9,'corfu-8000@sbb5'},[115,98,98,53,58,56,48,48,48],5]}},{set,{var,22},{call,layout_eqc,propose,[{cmdlet0,'corfu-8000@sbb5'},[115,98,98,53,58,56,48,48,48],5,64,{layout,81,[],[],[]}]}}],[[{set,{var,23},{call,layout_eqc,propose,[{cmdlet9,'corfu-8000@sbb5'},[115,98,98,53,58,56,48,48,48],5,53,{layout,22,[],[],[]}]}},{set,{var,24},{call,layout_eqc,commit,[{cmdlet9,'corfu-8000@sbb5'},[115,98,98,53,58,56,48,48,48],5,53,{layout,22,[],[],[]}]}}],[{set,{var,25},{call,layout_eqc,query,[{cmdlet9,'corfu-8000@sbb5'},[115,98,98,53,58,56,48,48,48],5]}},{set,{var,26},{call,layout_eqc,prepare,[{cmdlet2,'corfu-8000@sbb5'},[115,98,98,53,58,56,48,48,48],5,38]}},{set,{var,27},{call,layout_eqc,query,[{cmdlet3,'corfu-8000@sbb5'},[115,98,98,53,58,56,48,48,48],5]}},{set,{var,28},{call,layout_eqc,query,[{cmdlet7,'corfu-8000@sbb5'},[115,98,98,53,58,56,48,48,48],5]}},{set,{var,29},{call,layout_eqc,prepare,[{cmdlet2,'corfu-8000@sbb5'},[115,98,98,53,58,56,48,48,48],22,96]}}]]},{[{eqc_statem_history,{state,false,[115,98,98,53,58,56,48,48,48],[cmdlet0,cmdlet1,cmdlet2,cmdlet3,cmdlet4,cmdlet5,cmdlet6,cmdlet7,cmdlet8,cmdlet9],-1,[],[],0},{set,{var,1},{call,layout_eqc,reset,[{cmdlet8,'corfu-8000@sbb5'},[115,98,98,53,58,56,48,48,48]]}},[],{normal,[[79,75]]}},{eqc_statem_history,{state,true,[115,98,98,53,58,56,48,48,48],[cmdlet0,cmdlet1,cmdlet2,cmdlet3,cmdlet4,cmdlet5,cmdlet6,cmdlet7,cmdlet8,cmdlet9],-1,[],[],0},{set,{var,2},{call,layout_eqc,propose,[{cmdlet1,'corfu-8000@sbb5'},[115,98,98,53,58,56,48,48,48],0,86,{layout,5,[],[],[]}]}},[],{normal,[[69,82,82,79,82],[69,120,99,101,112,116,105,111,110,32,100,117,114,105,110,103,32,112,114,111,112,111,115,101],[111,114,103,46,99,111,114,102,117,100,98,46,114,117,110,116,105,109,101,46,101,120,99,101,112,116,105,111,110,115,46,79,117,116,114,97,110,107,101,100,69,120,99,101,112,116,105,111,110,58,32,72,105,103,104,101,114,32,114,97,110,107,32,45,49,32,101,110,99,111,117,110,116,101,114,101,100,44,32,108,97,121,111,117,116,32,61,32,110,117,108,108],[110,101,119,82,97,110,107,58,32,45,49],[115,116,97,99,107,58,32,106,97,118,97,46,117,116,105,108,46,99,111,110,99,117,114,114,101,110,116,46,69,120,101,99,117,116,105,111,110,69,120,99,101,112,116,105,111,110,58,32,111,114,103,46,99,111,114,102,117,100,98,46,114,117,110,116,105,109,101,46,101,120,99,101,112,116,105,111,110,115,46,79,117,116,114,97,110,107,101,100,69,120,99,101,112,116,105,111,110,58,32,72,105,103,104,101,114,32,114,97,110,107,32,45,49,32,101,110,99,111,117,110,116,101,114,101,100,44,32,108,97,121,111,117,116,32,61,32,110,117,108,108,10,9,97,116,32,106,97,118,97,46,117,116,105,108,46,99,111,110,99,117,114,114,101,110,116,46,67,111,109,112,108,101,116,97,98,108,101,70,117,116,117,114,101,46,114,101,112,111,114,116,71,101,116,40,67,111,109,112,108,101,116,97,98,108,101,70,117,116,117,114,101,46,106,97,118,97,58,51,53,55,41,10,9,97,116,32,106,97,118,97,46,117,116,105,108,46,99,111,110,99,117,114,114,101,110,116,46,67,111,109,112,108,101,116,97,98,108,101,70,117,116,117,114,101,46,103,101,116,40,67,111,109,112,108,101,116,97,98,108,101,70,117,116,117,114,101,46,106,97,118,97,58,49,56,57,53,41,10,9,97,116,32,111,114,103,46,99,111,114,102,117,100,98,46,99,109,100,108,101,116,115,46,99,111,114,102,117,95,108,97,121,111,117,116,46,109,97,105,110,50,40,99,111,114,102,117,95,108,97,121,111,117,116,46,106,97,118,97,58,49,57,53,41,10,9,97,116,32,111,114,103,46,99,111,114,102,117,100,98,46,99,109,100,108,101,116,115,46,67,109,100,108,101,116,82,111,117,116,101,114,46,109,97,105,110,50,40,67,109,100,108,101,116,82,111,117,116,101,114,46,106,97,118,97,58,53,52,41,10,9,97,116,32,111,114,103,46,99,111,114,102,117,100,98,46,105,110,102,114,97,115,116,114,117,99,116,117,114,101,46,76,97,121,111,117,116,83,101,114,118,101,114,46,114,117,110,69,114,108,77,98,111,120,40,76,97,121,111,117,116,83,101,114,118,101,114,46,106,97,118,97,58,56,48,57,41,10,9,97,116,32,111,114,103,46,99,111,114,102,117,100,98,46,105,110,102,114,97,115,116,114,117,99,116,117,114,101,46,76,97,121,111,117,116,83,101,114,118,101,114,46,114,117,110,69,114,108,77,98,111,120,49,40,76,97,121,111,117,116,83,101,114,118,101,114,46,106,97,118,97,58,55,54,50,41,10,9,97,116,32,106,97,118,97,46,108,97,110,103,46,84,104,114,101,97,100,46,114,117,110,40,84,104,114,101,97,100,46,106,97,118,97,58,55,52,53,41,10,67,97,117,115,101,100,32,98,121,58,32,111,114,103,46,99,111,114,102,117,100,98,46,114,117,110,116,105,109,101,46,101,120,99,101,112,116,105,111,110,115,46,79,117,116,114,97,110,107,101,100,69,120,99,101,112,116,105,111,110,58,32,72,105,103,104,101,114,32,114,97,110,107,32,45,49,32,101,110,99,111,117,110,116,101,114,101,100,44,32,108,97,121,111,117,116,32,61,32,110,117,108,108,10,9,97,116,32,111,114,103,46,99,111,114,102,117,100,98,46,114,117,110,116,105,109,101,46,99,108,105,101,110,116,115,46,76,97,121,111,117,116,67,108,105,101,110,116,46,104,97,110,100,108,101,77,101,115,115,97,103,101,40,76,97,121,111,117,116,67,108,105,101,110,116,46,106,97,118,97,58,55,52,41,10,9,97,116,32,111,114,103,46,99,111,114,102,117,100,98,46,114,117,110,116,105,109,101,46,99,108,105,101,110,116,115,46,78,101,116,116,121,67,108,105,101,110,116,82,111,117,116,101,114,46,99,104,97,110,110,101,108,82,101,97,100,48,40,78,101,116,116,121,67,108,105,101,110,116,82,111,117,116,101,114,46,106,97,118,97,58,52,53,49,41,10,9,97,116,32,111,114,103,46,99,111,114,102,117,100,98,46,114,117,110,116,105,109,101,46,99,108,105,101,110,116,115,46,78,101,116,116,121,67,108,105,101,110,116,82,111,117,116,101,114,46,99,104,97,110,110,101,108,82,101,97,100,48,40,78,101,116,116,121,67,108,105,101,110,116,82,111,117,116,101,114,46,106,97,118,97,58,52,55,41,10,9,97,116,32,105,111,46,110,101,116,116,121,46,99,104,97,110,110,101,108,46,83,105,109,112,108,101,67,104,97,110,110,101,108,73,110,98,111,117,110,100,72,97,110,100,108,101,114,46,99,104,97,110,110,101,108,82,101,97,100,40,83,105,109,112,108,101,67,104,97,110,110,101,108,73,110,98,111,117,110,100,72,97,110,100,108,101,114,46,106,97,118,97,58,49,48,53,41,10,9,97,116,32,105,111,46,110,101,116,116,121,46,99,104,97,110,110,101,108,46,65,98,115,116,114,97,99,116,67,104,97,110,110,101,108,72,97,110,100,108,101,114,67,111,110,116,101,120,116,46,105,110,118,111,107,101,67,104,97,110,110,101,108,82,101,97,100,40,65,98,115,116,114,97,99,116,67,104,97,110,110,101,108,72,97,110,100,108,101,114,67,111,110,116,101,120,116,46,106,97,118,97,58,51,52,50,41,10,9,97,116,32,105,111,46,110,101,116,116,121,46,99,104,97,110,110,101,108,46,65,98,115,116,114,97,99,116,67,104,97,110,110,101,108,72,97,110,100,108,101,114,67,111,110,116,101,120,116,46,105,110,118,111,107,101,67,104,97,110,110,101,108,82,101,97,100,40,65,98,115,116,114,97,99,116,67,104,97,110,110,101,108,72,97,110,100,108,101,114,67,111,110,116,101,120,116,46,106,97,118,97,58,51,50,56,41,10,9,97,116,32,105,111,46,110,101,116,116,121,46,99,104,97,110,110,101,108,46,65,98,115,116,114,97,99,116,67,104,97,110,110,101,108,72,97,110,100,108,101,114,67,111,110,116,101,120,116,46,102,105,114,101,67,104,97,110,110,101,108,82,101,97,100,40,65,98,115,116,114,97,99,116,67,104,97,110,110,101,108,72,97,110,100,108,101,114,67,111,110,116,101,120,116,46,106,97,118,97,58,51,50,49,41,10,9,97,116,32,105,111,46,110,101,116,116,121,46,104,97,110,100,108,101,114,46,99,111,100,101,99,46,66,121,116,101,84,111,77,101,115,115,97,103,101,68,101,99,111,100,101,114,46,102,105,114,101,67,104,97,110,110,101,108,82,101,97,100,40,66,121,116,101,84,111,77,101,115,115,97,103,101,68,101,99,111,100,101,114,46,106,97,118,97,58,50,57,51,41,10,9,97,116,32,105,111,46,110,101,116,116,121,46,104,97,110,100,108,101,114,46,99,111,100,101,99,46,66,121,116,101,84,111,77,101,115,115,97,103,101,68,101,99,111,100,101,114,46,99,104,97,110,110,101,108,82,101,97,100,40,66,121,116,101,84,111,77,101,115,115,97,103,101,68,101,99,111,100,101,114,46,106,97,118,97,58,50,54,55,41,10,9,97,116,32,105,111,46,110,101,116,116,121,46,99,104,97,110,110,101,108,46,65,98,115,116,114,97,99,116,67,104,97,110,110,101,108,72,97,110,100,108,101,114,67,111,110,116,101,120,116,46,105,110,118,111,107,101,67,104,97,110,110,101,108,82,101,97,100,40,65,98,115,116,114,97,99,116,67,104,97,110,110,101,108,72,97,110,100,108,101,114,67,111,110,116,101,120,116,46,106,97,118,97,58,51,52,50,41,10,9,97,116,32,105,111,46,110,101,116,116,121,46,99,104,97,110,110,101,108,46,65,98,115,116,114,97,99,116,67,104,97,110,110,101,108,72,97,110,100,108,101,114,67,111,110,116,101,120,116,46,97,99,99,101,115,115,36,54,48,48,40,65,98,115,116,114,97,99,116,67,104,97,110,110,101,108,72,97,110,100,108,101,114,67,111,110,116,101,120,116,46,106,97,118,97,58,51,51,41,10,9,97,116,32,105,111,46,110,101,116,116,121,46,99,104,97,110,110,101,108,46,65,98,115,116,114,97,99,116,67,104,97,110,110,101,108,72,97,110,100,108,101,114,67,111,110,116,101,120,116,36,55,46,114,117,110,40,65,98,115,116,114,97,99,116,67,104,97,110,110,101,108,72,97,110,100,108,101,114,67,111,110,116,101,120,116,46,106,97,118,97,58,51,51,51,41,10,9,97,116,32,105,111,46,110,101,116,116,121,46,117,116,105,108,46,99,111,110,99,117,114,114,101,110,116,46,68,101,102,97,117,108,116,69,118,101,110,116,69,120,101,99,117,116,111,114,46,114,117,110,40,68,101,102,97,117,108,116,69,118,101,110,116,69,120,101,99,117,116,111,114,46,106,97,118,97,58,51,54,41,10,9,97,116,32,105,111,46,110,101,116,116,121,46,117,116,105,108,46,99,111,110,99,117,114,114,101,110,116,46,83,105,110,103,108,101,84,104,114,101,97,100,69,118,101,110,116,69,120,101,99,117,116,111,114,36,50,46,114,117,110,40,83,105,110,103,108,101,84,104,114,101,97,100,69,118,101,110,116,69,120,101,99,117,116,111,114,46,106,97,118,97,58,49,49,50,41,10,9,46,46,46,32,49,32,109,111,114,101,10]]}},{eqc_statem_history,{state,true,[115,98,98,53,58,56,48,48,48],[cmdlet0,cmdlet1,cmdlet2,cmdlet3,cmdlet4,cmdlet5,cmdlet6,cmdlet7,cmdlet8,cmdlet9],-1,[],[],0},{set,{var,3},{call,layout_eqc,query,[{cmdlet0,'corfu-8000@sbb5'},[115,98,98,53,58,56,48,48,48],0]}},[],{normal,[[79,75],[123,10,32,32,34,108,97,121,111,117,116,83,101,114,118,101,114,115,34,58,32,91,10,32,32,32,32,34,108,111,99,97,108,104,111,115,116,58,56,48,48,48,34,10,32,32,93,44,10,32,32,34,115,101,113,117,101,110,99,101,114,115,34,58,32,91,10,32,32,32,32,34,108,111,99,97,108,104,111,115,116,58,56,48,48,48,34,10,32,32,93,44,10,32,32,34,115,101,103,109,101,110,116,115,34,58,32,91,10,32,32,32,32,123,10,32,32,32,32,32,32,34,114,101,112,108,105,99,97,116,105,111,110,77,111,100,101,34,58,32,34,67,72,65,73,78,95,82,69,80,76,73,67,65,84,73,79,78,34,44,10,32,32,32,32,32,32,34,115,116,97,114,116,34,58,32,48,44,10,32,32,32,32,32,32,34,101,110,100,34,58,32,45,49,44,10,32,32,32,32,32,32,34,115,116,114,105,112,101,115,34,58,32,91,10,32,32,32,32,32,32,32,32,123,10,32,32,32,32,32,32,32,32,32,32,34,108,111,103,83,101,114,118,101,114,115,34,58,32,91,10,32,32,32,32,32,32,32,32,32,32,32,32,34,108,111,99,97,108,104,111,115,116,58,56,48,48,48,34,10,32,32,32,32,32,32,32,32,32,32,93,10,32,32,32,32,32,32,32,32,125,10,32,32,32,32,32,32,93,10,32,32,32,32,125,10,32,32,93,44,10,32,32,34,101,112,111,99,104,34,58,32,48,10,125]]}},{eqc_statem_history,{state,true,[115,98,98,53,58,56,48,48,48],[cmdlet0,cmdlet1,cmdlet2,cmdlet3,cmdlet4,cmdlet5,cmdlet6,cmdlet7,cmdlet8,cmdlet9],-1,[],[],0},{set,{var,4},{call,layout_eqc,prepare,[{cmdlet8,'corfu-8000@sbb5'},[115,98,98,53,58,56,48,48,48],0,14]}},[],{normal,[[79,75]]}},{eqc_statem_history,{state,true,[115,98,98,53,58,56,48,48,48],[cmdlet0,cmdlet1,cmdlet2,cmdlet3,cmdlet4,cmdlet5,cmdlet6,cmdlet7,cmdlet8,cmdlet9],14,[],[],0},{set,{var,5},{call,layout_eqc,propose,[{cmdlet8,'corfu-8000@sbb5'},[115,98,98,53,58,56,48,48,48],0,14,{layout,92,[],[],[]}]}},[],{normal,[[79,75]]}},{eqc_statem_history,{state,true,[115,98,98,53,58,56,48,48,48],[cmdlet0,cmdlet1,cmdlet2,cmdlet3,cmdlet4,cmdlet5,cmdlet6,cmdlet7,cmdlet8,cmdlet9],14,{layout,92,[],[],[]},[],0},{set,{var,6},{call,layout_eqc,prepare,[{cmdlet8,'corfu-8000@sbb5'},[115,98,98,53,58,56,48,48,48],0,52]}},[],{normal,[[79,75]]}},{eqc_statem_history,{state,true,[115,98,98,53,58,56,48,48,48],[cmdlet0,cmdlet1,cmdlet2,cmdlet3,cmdlet4,cmdlet5,cmdlet6,cmdlet7,cmdlet8,cmdlet9],52,[],[],0},{set,{var,7},{call,layout_eqc,propose,[{cmdlet4,'corfu-8000@sbb5'},[115,98,98,53,58,56,48,48,48],0,52,{layout,5,[],[],[]}]}},[],{normal,[[79,75]]}},{eqc_statem_history,{state,true,[115,98,98,53,58,56,48,48,48],[cmdlet0,cmdlet1,cmdlet2,cmdlet3,cmdlet4,cmdlet5,cmdlet6,cmdlet7,cmdlet8,cmdlet9],52,{layout,5,[],[],[]},[],0},{set,{var,8},{call,layout_eqc,query,[{cmdlet1,'corfu-8000@sbb5'},[115,98,98,53,58,56,48,48,48],0]}},[],{normal,[[79,75],[123,10,32,32,34,108,97,121,111,117,116,83,101,114,118,101,114,115,34,58,32,91,10,32,32,32,32,34,108,111,99,97,108,104,111,115,116,58,56,48,48,48,34,10,32,32,93,44,10,32,32,34,115,101,113,117,101,110,99,101,114,115,34,58,32,91,10,32,32,32,32,34,108,111,99,97,108,104,111,115,116,58,56,48,48,48,34,10,32,32,93,44,10,32,32,34,115,101,103,109,101,110,116,115,34,58,32,91,10,32,32,32,32,123,10,32,32,32,32,32,32,34,114,101,112,108,105,99,97,116,105,111,110,77,111,100,101,34,58,32,34,67,72,65,73,78,95,82,69,80,76,73,67,65,84,73,79,78,34,44,10,32,32,32,32,32,32,34,115,116,97,114,116,34,58,32,48,44,10,32,32,32,32,32,32,34,101,110,100,34,58,32,45,49,44,10,32,32,32,32,32,32,34,115,116,114,105,112,101,115,34,58,32,91,10,32,32,32,32,32,32,32,32,123,10,32,32,32,32,32,32,32,32,32,32,34,108,111,103,83,101,114,118,101,114,115,34,58,32,91,10,32,32,32,32,32,32,32,32,32,32,32,32,34,108,111,99,97,108,104,111,115,116,58,56,48,48,48,34,10,32,32,32,32,32,32,32,32,32,32,93,10,32,32,32,32,32,32,32,32,125,10,32,32,32,32,32,32,93,10,32,32,32,32,125,10,32,32,93,44,10,32,32,34,101,112,111,99,104,34,58,32,48,10,125]]}},{eqc_statem_history,{state,true,[115,98,98,53,58,56,48,48,48],[cmdlet0,cmdlet1,cmdlet2,cmdlet3,cmdlet4,cmdlet5,cmdlet6,cmdlet7,cmdlet8,cmdlet9],52,{layout,5,[],[],[]},[],0},{set,{var,9},{call,layout_eqc,commit,[{cmdlet0,'corfu-8000@sbb5'},[115,98,98,53,58,56,48,48,48],0,52,{layout,5,[],[],[]}]}},[],{normal,[[79,75]]}},{eqc_statem_history,{state,true,[115,98,98,53,58,56,48,48,48],[cmdlet0,cmdlet1,cmdlet2,cmdlet3,cmdlet4,cmdlet5,cmdlet6,cmdlet7,cmdlet8,cmdlet9],-1,[],{layout,5,[],[],[]},5},{set,{var,10},{call,layout_eqc,propose,[{cmdlet5,'corfu-8000@sbb5'},[115,98,98,53,58,56,48,48,48],5,81,{layout,5,[],[],[]}]}},[],{normal,[[69,82,82,79,82],[69,120,99,101,112,116,105,111,110,32,100,117,114,105,110,103,32,112,114,111,112,111,115,101],[111,114,103,46,99,111,114,102,117,100,98,46,114,117,110,116,105,109,101,46,101,120,99,101,112,116,105,111,110,115,46,79,117,116,114,97,110,107,101,100,69,120,99,101,112,116,105,111,110,58,32,72,105,103,104,101,114,32,114,97,110,107,32,45,49,32,101,110,99,111,117,110,116,101,114,101,100,44,32,108,97,121,111,117,116,32,61,32,110,117,108,108],[110,101,119,82,97,110,107,58,32,45,49],[115,116,97,99,107,58,32,106,97,118,97,46,117,116,105,108,46,99,111,110,99,117,114,114,101,110,116,46,69,120,101,99,117,116,105,111,110,69,120,99,101,112,116,105,111,110,58,32,111,114,103,46,99,111,114,102,117,100,98,46,114,117,110,116,105,109,101,46,101,120,99,101,112,116,105,111,110,115,46,79,117,116,114,97,110,107,101,100,69,120,99,101,112,116,105,111,110,58,32,72,105,103,104,101,114,32,114,97,110,107,32,45,49,32,101,110,99,111,117,110,116,101,114,101,100,44,32,108,97,121,111,117,116,32,61,32,110,117,108,108,10,9,97,116,32,106,97,118,97,46,117,116,105,108,46,99,111,110,99,117,114,114,101,110,116,46,67,111,109,112,108,101,116,97,98,108,101,70,117,116,117,114,101,46,114,101,112,111,114,116,71,101,116,40,67,111,109,112,108,101,116,97,98,108,101,70,117,116,117,114,101,46,106,97,118,97,58,51,53,55,41,10,9,97,116,32,106,97,118,97,46,117,116,105,108,46,99,111,110,99,117,114,114,101,110,116,46,67,111,109,112,108,101,116,97,98,108,101,70,117,116,117,114,101,46,103,101,116,40,67,111,109,112,108,101,116,97,98,108,101,70,117,116,117,114,101,46,106,97,118,97,58,49,56,57,53,41,10,9,97,116,32,111,114,103,46,99,111,114,102,117,100,98,46,99,109,100,108,101,116,115,46,99,111,114,102,117,95,108,97,121,111,117,116,46,109,97,105,110,50,40,99,111,114,102,117,95,108,97,121,111,117,116,46,106,97,118,97,58,49,57,53,41,10,9,97,116,32,111,114,103,46,99,111,114,102,117,100,98,46,99,109,100,108,101,116,115,46,67,109,100,108,101,116,82,111,117,116,101,114,46,109,97,105,110,50,40,67,109,100,108,101,116,82,111,117,116,101,114,46,106,97,118,97,58,53,52,41,10,9,97,116,32,111,114,103,46,99,111,114,102,117,100,98,46,105,110,102,114,97,115,116,114,117,99,116,117,114,101,46,76,97,121,111,117,116,83,101,114,118,101,114,46,114,117,110,69,114,108,77,98,111,120,40,76,97,121,111,117,116,83,101,114,118,101,114,46,106,97,118,97,58,56,48,57,41,10,9,97,116,32,111,114,103,46,99,111,114,102,117,100,98,46,105,110,102,114,97,115,116,114,117,99,116,117,114,101,46,76,97,121,111,117,116,83,101,114,118,101,114,46,114,117,110,69,114,108,77,98,111,120,53,40,76,97,121,111,117,116,83,101,114,118,101,114,46,106,97,118,97,58,55,54,54,41,10,9,97,116,32,106,97,118,97,46,108,97,110,103,46,84,104,114,101,97,100,46,114,117,110,40,84,104,114,101,97,100,46,106,97,118,97,58,55,52,53,41,10,67,97,117,115,101,100,32,98,121,58,32,111,114,103,46,99,111,114,102,117,100,98,46,114,117,110,116,105,109,101,46,101,120,99,101,112,116,105,111,110,115,46,79,117,116,114,97,110,107,101,100,69,120,99,101,112,116,105,111,110,58,32,72,105,103,104,101,114,32,114,97,110,107,32,45,49,32,101,110,99,111,117,110,116,101,114,101,100,44,32,108,97,121,111,117,116,32,61,32,110,117,108,108,10,9,97,116,32,111,114,103,46,99,111,114,102,117,100,98,46,114,117,110,116,105,109,101,46,99,108,105,101,110,116,115,46,76,97,121,111,117,116,67,108,105,101,110,116,46,104,97,110,100,108,101,77,101,115,115,97,103,101,40,76,97,121,111,117,116,67,108,105,101,110,116,46,106,97,118,97,58,55,52,41,10,9,97,116,32,111,114,103,46,99,111,114,102,117,100,98,46,114,117,110,116,105,109,101,46,99,108,105,101,110,116,115,46,78,101,116,116,121,67,108,105,101,110,116,82,111,117,116,101,114,46,99,104,97,110,110,101,108,82,101,97,100,48,40,78,101,116,116,121,67,108,105,101,110,116,82,111,117,116,101,114,46,106,97,118,97,58,52,53,49,41,10,9,97,116,32,111,114,103,46,99,111,114,102,117,100,98,46,114,117,110,116,105,109,101,46,99,108,105,101,110,116,115,46,78,101,116,116,121,67,108,105,101,110,116,82,111,117,116,101,114,46,99,104,97,110,110,101,108,82,101,97,100,48,40,78,101,116,116,121,67,108,105,101,110,116,82,111,117,116,101,114,46,106,97,118,97,58,52,55,41,10,9,97,116,32,105,111,46,110,101,116,116,121,46,99,104,97,110,110,101,108,46,83,105,109,112,108,101,67,104,97,110,110,101,108,73,110,98,111,117,110,100,72,97,110,100,108,101,114,46,99,104,97,110,110,101,108,82,101,97,100,40,83,105,109,112,108,101,67,104,97,110,110,101,108,73,110,98,111,117,110,100,72,97,110,100,108,101,114,46,106,97,118,97,58,49,48,53,41,10,9,97,116,32,105,111,46,110,101,116,116,121,46,99,104,97,110,110,101,108,46,65,98,115,116,114,97,99,116,67,104,97,110,110,101,108,72,97,110,100,108,101,114,67,111,110,116,101,120,116,46,105,110,118,111,107,101,67,104,97,110,110,101,108,82,101,97,100,40,65,98,115,116,114,97,99,116,67,104,97,110,110,101,108,72,97,110,100,108,101,114,67,111,110,116,101,120,116,46,106,97,118,97,58,51,52,50,41,10,9,97,116,32,105,111,46,110,101,116,116,121,46,99,104,97,110,110,101,108,46,65,98,115,116,114,97,99,116,67,104,97,110,110,101,108,72,97,110,100,108,101,114,67,111,110,116,101,120,116,46,105,110,118,111,107,101,67,104,97,110,110,101,108,82,101,97,100,40,65,98,115,116,114,97,99,116,67,104,97,110,110,101,108,72,97,110,100,108,101,114,67,111,110,116,101,120,116,46,106,97,118,97,58,51,50,56,41,10,9,97,116,32,105,111,46,110,101,116,116,121,46,99,104,97,110,110,101,108,46,65,98,115,116,114,97,99,116,67,104,97,110,110,101,108,72,97,110,100,108,101,114,67,111,110,116,101,120,116,46,102,105,114,101,67,104,97,110,110,101,108,82,101,97,100,40,65,98,115,116,114,97,99,116,67,104,97,110,110,101,108,72,97,110,100,108,101,114,67,111,110,116,101,120,116,46,106,97,118,97,58,51,50,49,41,10,9,97,116,32,105,111,46,110,101,116,116,121,46,104,97,110,100,108,101,114,46,99,111,100,101,99,46,66,121,116,101,84,111,77,101,115,115,97,103,101,68,101,99,111,100,101,114,46,102,105,114,101,67,104,97,110,110,101,108,82,101,97,100,40,66,121,116,101,84,111,77,101,115,115,97,103,101,68,101,99,111,100,101,114,46,106,97,118,97,58,50,57,51,41,10,9,97,116,32,105,111,46,110,101,116,116,121,46,104,97,110,100,108,101,114,46,99,111,100,101,99,46,66,121,116,101,84,111,77,101,115,115,97,103,101,68,101,99,111,100,101,114,46,99,104,97,110,110,101,108,82,101,97,100,40,66,121,116,101,84,111,77,101,115,115,97,103,101,68,101,99,111,100,101,114,46,106,97,118,97,58,50,54,55,41,10,9,97,116,32,105,111,46,110,101,116,116,121,46,99,104,97,110,110,101,108,46,65,98,115,116,114,97,99,116,67,104,97,110,110,101,108,72,97,110,100,108,101,114,67,111,110,116,101,120,116,46,105,110,118,111,107,101,67,104,97,110,110,101,108,82,101,97,100,40,65,98,115,116,114,97,99,116,67,104,97,110,110,101,108,72,97,110,100,108,101,114,67,111,110,116,101,120,116,46,106,97,118,97,58,51,52,50,41,10,9,97,116,32,105,111,46,110,101,116,116,121,46,99,104,97,110,110,101,108,46,65,98,115,116,114,97,99,116,67,104,97,110,110,101,108,72,97,110,100,108,101,114,67,111,110,116,101,120,116,46,97,99,99,101,115,115,36,54,48,48,40,65,98,115,116,114,97,99,116,67,104,97,110,110,101,108,72,97,110,100,108,101,114,67,111,110,116,101,120,116,46,106,97,118,97,58,51,51,41,10,9,97,116,32,105,111,46,110,101,116,116,121,46,99,104,97,110,110,101,108,46,65,98,115,116,114,97,99,116,67,104,97,110,110,101,108,72,97,110,100,108,101,114,67,111,110,116,101,120,116,36,55,46,114,117,110,40,65,98,115,116,114,97,99,116,67,104,97,110,110,101,108,72,97,110,100,108,101,114,67,111,110,116,101,120,116,46,106,97,118,97,58,51,51,51,41,10,9,97,116,32,105,111,46,110,101,116,116,121,46,117,116,105,108,46,99,111,110,99,117,114,114,101,110,116,46,68,101,102,97,117,108,116,69,118,101,110,116,69,120,101,99,117,116,111,114,46,114,117,110,40,68,101,102,97,117,108,116,69,118,101,110,116,69,120,101,99,117,116,111,114,46,106,97,118,97,58,51,54,41,10,9,97,116,32,105,111,46,110,101,116,116,121,46,117,116,105,108,46,99,111,110,99,117,114,114,101,110,116,46,83,105,110,103,108,101,84,104,114,101,97,100,69,118,101,110,116,69,120,101,99,117,116,111,114,36,50,46,114,117,110,40,83,105,110,103,108,101,84,104,114,101,97,100,69,118,101,110,116,69,120,101,99,117,116,111,114,46,106,97,118,97,58,49,49,50,41,10,9,46,46,46,32,49,32,109,111,114,101,10]]}},{eqc_statem_history,{state,true,[115,98,98,53,58,56,48,48,48],[cmdlet0,cmdlet1,cmdlet2,cmdlet3,cmdlet4,cmdlet5,cmdlet6,cmdlet7,cmdlet8,cmdlet9],-1,[],{layout,5,[],[],[]},5},{set,{var,11},{call,layout_eqc,prepare,[{cmdlet3,'corfu-8000@sbb5'},[115,98,98,53,58,56,48,48,48],5,21]}},[],{normal,[[79,75]]}},{eqc_statem_history,{state,true,[115,98,98,53,58,56,48,48,48],[cmdlet0,cmdlet1,cmdlet2,cmdlet3,cmdlet4,cmdlet5,cmdlet6,cmdlet7,cmdlet8,cmdlet9],21,[],{layout,5,[],[],[]},5},{set,{var,12},{call,layout_eqc,query,[{cmdlet1,'corfu-8000@sbb5'},[115,98,98,53,58,56,48,48,48],5]}},[],{normal,[[79,75],[123,10,32,32,34,108,97,121,111,117,116,83,101,114,118,101,114,115,34,58,32,91,93,44,10,32,32,34,115,101,113,117,101,110,99,101,114,115,34,58,32,91,93,44,10,32,32,34,115,101,103,109,101,110,116,115,34,58,32,91,93,44,10,32,32,34,101,112,111,99,104,34,58,32,53,10,125]]}}],[[],[]],{postcondition,false}}},
    ?FORALL(Cmds,
            FileCmds,
            my_run_always(100, FileMod, Cmds,
                          fun(Mod, TheCmds) ->
                                  FileRes
                          end,
                          fun(_TheCmds, _H, _S_or_Hs, Res) ->
                                  Res == ok
                          end)
            ).

seq_to_par_cmds(L) ->
    [Cmd || Cmd <- L,
            element(1, Cmd) /= init].

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

java_rpc(Node, reset, Endpoint) ->
    AllArgs = ["corfu_layout", "reset", Endpoint],
    java_rpc_call(Node, AllArgs);
java_rpc(Node, reboot, Endpoint) ->
    AllArgs = ["corfu_layout", "reboot", Endpoint],
    java_rpc_call(Node, AllArgs).

java_rpc({_RegName, _NodeName} = Mbox, CmdName, Endpoint, C_Epoch, Args) ->
    AllArgs = ["corfu_layout", CmdName, Endpoint] ++
        ["-p", lists:flatten(io_lib:format("~w", [Mbox])) ] ++ %% --quickcheck-ap-prefix
        ["-e", integer_to_list(C_Epoch)] ++ Args,
    java_rpc_call(Mbox, AllArgs).

java_rpc_call(Mbox, AllArgs) ->
    ID = make_ref(),
    Mbox ! {self(), ID, AllArgs},
    receive
        {ID, Res} ->
            Res
    after 2*1000 ->
            timeout
    end.
